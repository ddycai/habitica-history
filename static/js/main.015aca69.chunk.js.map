{"version":3,"sources":["svg/difficulty-trivial.svg","TaskIcon.tsx","HistoryTableHeader.tsx","DailyHistory.tsx","HabitHistory.tsx","TodoHistory.tsx","UserHistory.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fillRule","d","_ref","svgRef","title","props","width","height","viewBox","ref","ForwardRef","forwardRef","TaskIcon","priority","nextDue","context","useContext","AppContext","classNames","getColorClass","task","join","stars","Array","Math","ceil","fill","aria-hidden","taskValue","value","toFixed","moment","showTaskIcons","Fragment","data-tip","data-for","id","className","place","effect","date","now","diff","format","year","formatDate","VALUE_THRESHOLDS","COLOR_CLASS","HistoryTableHeader","role","onClick","setShowNoHistory","showNoHistory","dates","map","day","md","require","DailyHistory","useState","data","daily","Daily","historyMap","Map","text","history","log","debug","delta","taskUpdateTime","cronIntervals","search","unix","has","DATE_KEY_FORMAT","subtract","taskDate","set","dailyDeltas","get","filter","undefined","dangerouslySetInnerHTML","__html","render","DailyStatus","symbol","push","HabitHistory","habit","Habit","record","JSON","stringify","scoredUp","scoredDown","dailyScores","score","HabitScore","up","down","TodoHistory","startDate","todos","todo","dateCompleted","isAfter","Todo","completionDate","React","createContext","IntervalTree","UserHistory","isLoadingUserData","setLoadingUserData","isLoadingTaskData","setLoadingTaskData","isLoadingTodoData","setLoadingTodoData","numDaysToShow","setNumDaysToShow","setShowTaskIcons","cronTimes","setCronTimes","habits","setHabits","dailys","setDailys","setTodos","userId","userApiKey","fetchWithApiKey","url","fetch","method","headers","handleApiError","res","success","Error","message","setError","useEffect","HABITICA_API_URL","then","json","result","exp","cronTime","error","type","setAppState","AppState","DATA_FETCH_SUCCESS","forEach","range","insert","numDays","appContext","_","reverse","startOf","Provider","AppControls","toggleTaskIcons","monthString","monthStart","monthEnd","month","startFormat","getMonthString","App","setLevel","setUserId","setUserApiKey","PROMPT_FOR_USER_CREDS","appState","ERROR","href","rel","onChange","event","minLength","preventDefault","FETCHING_DATA","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.015aca69.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M10.667 10.667L16 8l-5.333-2.667L8 0 5.333 5.333 0 8l5.333 2.667L8 16z\"\n});\n\nvar SvgDifficultyTrivial = function SvgDifficultyTrivial(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgDifficultyTrivial, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/difficulty-trivial.63c79fb6.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useContext } from \"react\";\nimport moment, { Moment } from \"moment\";\n\nimport ReactTooltip from \"react-tooltip\";\nimport { ReactComponent as TrivialIcon } from \"./svg/difficulty-trivial.svg\";\n\nimport \"./TaskIcon.css\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserHistory\";\n\nconst DATE_FORMAT = \"ddd MMM D\";\nconst DATE_FORMAT_WITH_YEAR = `MMM D YYYY`;\n\nexport function TaskIcon(props: { task: Task }) {\n  const context = useContext(AppContext);\n  const classNames = [\n    \"task-icon-container\",\n    \"center-wrapper\",\n    getColorClass(props.task),\n  ].join(\" \");\n\n  const stars = Array(getDifficultyLevel(props.task.priority)).fill(\n    <TrivialIcon fill=\"white\" aria-hidden />\n  );\n  const taskValue = props.task.value.toFixed(1);\n\n  let nextDue: Moment | undefined;\n  if (props.task.nextDue) {\n    nextDue = moment(props.task.nextDue[0]);\n  }\n  return context.showTaskIcons ? (\n    <React.Fragment>\n      <div data-tip data-for={props.task.id} className={classNames}>\n        {stars}\n      </div>\n      <ReactTooltip id={props.task.id} place=\"left\" effect=\"solid\">\n        {nextDue ? (\n          <div>\n            <b>Next due:</b> {formatDate(nextDue)}\n          </div>\n        ) : null}\n        <div>\n          <b>Task value:</b> {taskValue}\n        </div>\n      </ReactTooltip>\n    </React.Fragment>\n  ) : null;\n}\n\nfunction formatDate(date: Moment): string {\n  const now = moment();\n  if (date.diff(now, \"days\") < 1) {\n    return \"tomorrow\";\n  } else if (date.diff(now, \"days\") < 6) {\n    return date.format(\"dddd\");\n  } else if (date.year === moment().year) {\n    return date.format(DATE_FORMAT);\n  } else {\n    return date.format(DATE_FORMAT_WITH_YEAR);\n  }\n}\n\nfunction getDifficultyLevel(priority: number) {\n  return Math.ceil(priority / 0.5);\n}\n\nconst VALUE_THRESHOLDS = [-16, -9, -1, 1, 6, 12];\nconst COLOR_CLASS = [\"worst\", \"worse\", \"bad\", \"neutral\", \"good\", \"better\"];\n\nfunction getColorClass(task: Task): string {\n  for (let i = 0; i < VALUE_THRESHOLDS.length; i++) {\n    if (task.value < VALUE_THRESHOLDS[i]) {\n      return COLOR_CLASS[i];\n    }\n  }\n  return \"best\";\n}\n","import React, { useContext } from \"react\";\nimport { UnfoldIcon, FoldIcon } from \"@primer/octicons-react\";\n\nimport { AppContext } from \"./UserHistory\";\n\nexport default function HistoryTableHeader(props: {\n  title: string;\n  setShowNoHistory: (val: boolean) => void;\n  showNoHistory: boolean;\n}) {\n  const context = useContext(AppContext);\n  return (\n    <tr>\n      <th>\n        <div className=\"section-header\">\n          <div className=\"section-header-title\">\n            <h2>{props.title}</h2>\n            <div\n              role=\"button\"\n              className=\"show-no-history clickable\"\n              title=\"Show/Hide tasks with no data\"\n              onClick={() => props.setShowNoHistory(!props.showNoHistory)}\n            >\n              {props.showNoHistory ? (\n                <FoldIcon aria-hidden=\"true\" />\n              ) : (\n                <UnfoldIcon aria-hidden=\"true\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </th>\n      {context.dates.map((day) => (\n        <th>\n          <div className=\"date date-heading\">\n            <span>{day.format(\"ddd\")}</span>\n            <span>{day.format(\"DD\")}</span>\n          </div>\n        </th>\n      ))}\n    </tr>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport moment from \"moment\";\nimport log from \"loglevel\";\n\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserHistory\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport HistoryTableHeader from \"./HistoryTableHeader\";\n\nvar md = require(\"habitica-markdown\");\n\nexport interface DailyHistoryProps {\n  data: Task[];\n}\n\nexport default function DailyHistory(props: DailyHistoryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(false);\n\n  return (\n    <section className=\"dailys\">\n      <table>\n        <HistoryTableHeader\n          title=\"Dailies\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        {props.data.map((daily) => (\n          <Daily showNoHistory={showNoHistory} daily={daily} />\n        ))}\n      </table>\n      <div\n        className=\"link show-no-history\"\n        onClick={() => setShowNoHistory(!showNoHistory)}\n      ></div>\n    </section>\n  );\n}\n\nexport function Daily(props: { daily: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, number>();\n\n  const { text, history } = props.daily;\n\n  log.debug(text);\n  for (let i = 0; i < history.length; i++) {\n    let delta;\n    if (i === 0) {\n      delta = history[i].value;\n    } else {\n      delta = history[i].value - history[i - 1].value;\n    }\n    let taskUpdateTime = moment(history[i].date);\n    log.debug(\n      taskUpdateTime.format(\"YYYY-MM-DD HH:mm:ss\") + \": \" + history[i].value\n    );\n    // Only consider times when the task value changes (or the first value).\n    if (delta !== 0) {\n      // This task update was done via cron so the task was actually done the\n      // day before.\n      if (\n        context.cronIntervals.search(\n          taskUpdateTime.unix(),\n          taskUpdateTime.unix()\n        ).length > 0\n      ) {\n        // Daily could have been completed twice in the cron time so if this is\n        // the second time, don't subtract a day.\n        if (!historyMap.has(taskUpdateTime.format(DATE_KEY_FORMAT))) {\n          taskUpdateTime = taskUpdateTime.subtract(1, \"day\");\n        } else {\n          log.debug(\n            `Multiple daily completions on for ${text} on ${taskUpdateTime}`\n          );\n        }\n      }\n      const taskDate = taskUpdateTime.format(DATE_KEY_FORMAT);\n      historyMap.set(taskDate, delta);\n    }\n  }\n\n  const dailyDeltas = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => historyMap.get(day));\n\n  if (\n    dailyDeltas.filter((delta) => delta !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        <TaskIcon task={props.daily} />\n        <span\n          className=\"task-name\"\n          dangerouslySetInnerHTML={{ __html: md.render(text) }}\n        />\n      </td>\n      {dailyDeltas.map((delta) => (\n        <DailyStatus delta={delta} />\n      ))}\n    </tr>\n  );\n}\n\nfunction DailyStatus(props: { delta: number | undefined }) {\n  let classNames = [\"daily-cell\"];\n  let symbol;\n  if (!props.delta || props.delta === 0) {\n    classNames.push(\"pass\");\n    symbol = \"\\xa0\";\n  } else if (props.delta > 0) {\n    classNames.push(\"success\");\n    symbol = \"✓\";\n  } else {\n    classNames.push(\"fail\");\n    symbol = \"✖\";\n  }\n  return (\n    <td className={classNames.join(\" \")}>\n      {symbol && (\n        <div className=\"center-wrapper\">\n          <span className=\"symbol\">{symbol}</span>\n        </div>\n      )}\n    </td>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport moment from \"moment\";\nimport log from \"loglevel\";\n\nimport { Task } from \"./HabiticaTypes\";\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { AppContext } from \"./UserHistory\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport HistoryTableHeader from \"./HistoryTableHeader\";\n\nvar md = require(\"habitica-markdown\");\n\nexport interface HabitHistoryProps {\n  data: Task[];\n}\n\nexport default function HabitHistory(props: HabitHistoryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(false);\n\n  return (\n    <section className=\"habits\">\n      <table>\n        <HistoryTableHeader\n          title=\"Habits\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        {props.data.map((habit) => (\n          <Habit showNoHistory={showNoHistory} habit={habit} />\n        ))}\n      </table>\n    </section>\n  );\n}\n\nexport function Habit(props: { habit: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, [number, number]>();\n  const { text, history } = props.habit;\n\n  log.debug(text);\n  for (let record of history) {\n    let taskDate = moment(record.date).format(DATE_KEY_FORMAT);\n    log.debug(JSON.stringify(record));\n    if (record.scoredUp !== undefined && record.scoredDown !== undefined) {\n      historyMap.set(taskDate, [record.scoredUp, record.scoredDown]);\n    }\n  }\n\n  const dailyScores = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => historyMap.get(day));\n\n  if (\n    dailyScores.filter((score) => score !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        <TaskIcon task={props.habit} />\n        <span\n          className=\"task-name\"\n          dangerouslySetInnerHTML={{ __html: md.render(text) }}\n        />\n      </td>\n      {dailyScores.map((score) => {\n        if (score) {\n          return <HabitScore up={score[0]} down={score[1]} />;\n        } else {\n          return <td className=\"habit-cell\">&nbsp;</td>;\n        }\n      })}\n    </tr>\n  );\n}\n\nfunction HabitScore(props: { up: number; down: number }) {\n  return (\n    <td className=\"habit-cell\">\n      <div className=\"habit-score-container\">\n        {props.up > 0 && (\n          <div className=\"success center-wrapper\">\n            <span>+{props.up}</span>\n          </div>\n        )}\n        {props.down > 0 && (\n          <div className=\"fail center-wrapper\">\n            <span>-{props.down}</span>\n          </div>\n        )}\n      </div>\n    </td>\n  );\n}\n","import React, { useContext } from \"react\";\nimport moment from \"moment\";\n\nimport \"./TodoHistory.css\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserHistory\";\nimport { TaskIcon } from \"./TaskIcon\";\n\nvar md = require(\"habitica-markdown\");\n\nconst TODO_FORMAT = \"MMM D\";\n\nexport default function TodoHistory(props: { data: Task[] }) {\n  const context = useContext(AppContext);\n  const startDate = context.dates[0];\n  const todos = props.data.filter((todo) =>\n    moment(todo!.dateCompleted).isAfter(startDate)\n  );\n\n  return (\n    <section className=\"todos\">\n      <h2>Completed Todos</h2>\n      <ul>\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nfunction Todo(props: { todo: Task }) {\n  const completionDate = moment(props.todo!.dateCompleted).format(TODO_FORMAT);\n  return (\n    <li className=\"todo-row\">\n      <TaskIcon task={props.todo} />\n      <span className=\"todo-date date\">{completionDate}</span>\n      <div\n        className=\"task-name\"\n        dangerouslySetInnerHTML={{ __html: md.render(props.todo.text) }}\n      />\n    </li>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport IntervalTree from \"node-interval-tree\";\nimport moment, { Moment } from \"moment\";\n\nimport { AppState } from \"./App\";\nimport { Task, History } from \"./HabiticaTypes\";\nimport DailyHistory from \"./DailyHistory\";\nimport HabitHistory from \"./HabitHistory\";\nimport TodoHistory from \"./TodoHistory\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nconst HABITICA_API_URL = \"https://habitica.com/api/v3\";\nconst CLIENT_KEY = \"0d9428fd-d6fa-45f3-a4db-f130e3ef10ea-HabiticaTracker\";\nconst USER_PATH = \"/user\";\nconst TASKS_PATH = \"/tasks/user\";\nconst TODOS_COMPLETED_PATH = \"/tasks/user?type=completedTodos\";\nconst DEFAULT_NUM_DAYS_TO_SHOW = 7;\n\n/**\n * Tasks completed during Cron time are tasks which were completed the previous\n * day. These are different from tasks which were completed at other times\n * which are assigned to the date on which they were completed. The Cron time\n * is used to guess at which tasks fall into each category. Because the task\n * completion time is not exactly equal to the cron time, this constant is used\n * to create a Cron time buffer to designate all tasks which were completed\n * this amount of time before the Cron time as Cron tasks.\n */\nconst CRON_BUFFER_DURATION_SECONDS = 60;\n\nexport const AppContext = React.createContext({\n  showTaskIcons: true,\n  dates: Array<Moment>(),\n  cronIntervals: new IntervalTree(),\n});\n\ninterface UserHistoryProps {\n  userId: string;\n  userApiKey: string;\n  setError: (errorMessage: Error) => void;\n  setAppState: (state: AppState) => void;\n}\n\nexport default function UserHistory(props: UserHistoryProps) {\n  // App states\n  const [isLoadingUserData, setLoadingUserData] = useState(true);\n  const [isLoadingTaskData, setLoadingTaskData] = useState(true);\n  const [isLoadingTodoData, setLoadingTodoData] = useState(true);\n\n  // User options\n  const [numDaysToShow, setNumDaysToShow] = useState<number>(\n    DEFAULT_NUM_DAYS_TO_SHOW\n  );\n  const [showTaskIcons, setShowTaskIcons] = useState<boolean>(true);\n\n  // User data\n  const [cronTimes, setCronTimes] = useState<Array<[number, number]>>([]);\n  const [habits, setHabits] = useState<Task[]>([]);\n  const [dailys, setDailys] = useState<Task[]>([]);\n  const [todos, setTodos] = useState<Task[]>([]);\n\n  const { userId, userApiKey } = props;\n  const fetchWithApiKey = (url: string) => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-user\": userId,\n        \"x-api-key\": userApiKey,\n        \"x-client\": CLIENT_KEY,\n      },\n    });\n  };\n\n  const handleApiError = (res: any) => {\n    if (!res.success) {\n      throw new Error(res.message);\n    }\n    return res;\n  };\n\n  const setError = props.setError;\n\n  // Fetch user data to get cron times.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + USER_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setCronTimes(\n            result.data.history.exp.map((history: History) => {\n              const cronTime = moment(history.date);\n              return [\n                cronTime.unix() - CRON_BUFFER_DURATION_SECONDS,\n                cronTime.unix() + CRON_BUFFER_DURATION_SECONDS,\n              ];\n            })\n          );\n          setLoadingUserData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch habit and daily data.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + TASKS_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setHabits(result.data.filter((task: Task) => task.type === \"habit\"));\n          setDailys(result.data.filter((task: Task) => task.type === \"daily\"));\n          setLoadingTaskData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch completed todos.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + TODOS_COMPLETED_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setTodos(result.data.filter((task: Task) => task.type === \"todo\"));\n          setLoadingTodoData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  if (isLoadingUserData || isLoadingTaskData || isLoadingTodoData) {\n    return (\n      <div className=\"App\">\n        <p>Loading...</p>\n      </div>\n    );\n  } else {\n    props.setAppState(AppState.DATA_FETCH_SUCCESS);\n    const cronIntervals = new IntervalTree();\n    cronTimes.forEach((range) =>\n      cronIntervals.insert(range[0], range[1], true)\n    );\n\n    const appContext = {\n      showTaskIcons: showTaskIcons,\n      dates: getDateArray(numDaysToShow),\n      cronIntervals,\n    };\n\n    return (\n      <div className=\"App\">\n        <AppContext.Provider value={appContext}>\n          <AppControls\n            numDaysToShow={numDaysToShow}\n            setNumDaysToShow={setNumDaysToShow}\n            toggleTaskIcons={() => setShowTaskIcons(!showTaskIcons)}\n          />\n          <HabitHistory data={habits} />\n          <DailyHistory data={dailys} />\n          <TodoHistory data={todos} />\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n\nfunction AppControls(props: {\n  numDaysToShow: number;\n  setNumDaysToShow: (n: number) => void;\n  toggleTaskIcons: () => void;\n}) {\n  const context = useContext(AppContext);\n  const showMore = () => props.setNumDaysToShow(props.numDaysToShow + 7);\n  const showLess = () => props.setNumDaysToShow(props.numDaysToShow - 7);\n  const monthString = getMonthString(context.dates);\n\n  return (\n    <div className=\"app-controls\">\n      <div>\n        <span role=\"button\" className=\"link\" onClick={showMore}>\n          +1 week\n        </span>\n        {props.numDaysToShow > 7 ? (\n          <span>\n            <span> / </span>\n            <span role=\"button\" className=\"link\" onClick={showLess}>\n              -1 week\n            </span>\n          </span>\n        ) : null}\n      </div>\n      <div className=\"date-header\">{monthString}</div>\n      <span\n        role=\"button\"\n        className=\"link\"\n        onClick={props.toggleTaskIcons}\n        title=\"Show/Hide task icons\"\n      >\n        {context.showTaskIcons ? \"Hide\" : \"Show\"} Task Icons\n      </span>\n    </div>\n  );\n}\n\nfunction getMonthString(dates: Moment[]): string {\n  const monthStart = dates[0];\n  const monthEnd = dates[dates.length - 1];\n  if (monthStart.month() === monthEnd.month()) {\n    return monthEnd.format(\"MMMM YYYY\");\n  }\n  let startFormat = monthStart.year() === monthEnd.year() ? \"MMM\" : \"MMM YYYY\";\n  let endFormat = \"MMM YYYY\";\n  return [monthStart.format(startFormat), monthEnd.format(endFormat)].join(\"–\");\n}\n\n/** Get all the dates to show.  */\nfunction getDateArray(numDays: number): Moment[] {\n  return Array(numDays)\n    .fill(0)\n    .map((_, i) => i + 1)\n    .reverse()\n    .map((i) => moment().subtract(i, \"days\").startOf(\"day\"));\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport log from \"loglevel\";\n\nimport \"./App.css\";\nimport UserHistory from \"./UserHistory\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nexport enum AppState {\n  PROMPT_FOR_USER_CREDS,\n  FETCHING_DATA,\n  DATA_FETCH_SUCCESS,\n  ERROR,\n}\n\nfunction App() {\n  log.setLevel('debug');\n  const [userId, setUserId] = useState<string>(\"\");\n  const [userApiKey, setUserApiKey] = useState<string>(\"\");\n  const [error, setError] = useState<Error>();\n  const [appState, setAppState] = useState<AppState>(\n    AppState.PROMPT_FOR_USER_CREDS\n  );\n\n  const setAppError = (error: Error) => {\n    setError(error);\n    setAppState(AppState.ERROR);\n  };\n\n  const handleUserIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserId(event.target.value);\n  };\n\n  const handleUserApiKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserApiKey(event.target.value);\n  };\n\n  const handleSubmit = (event: React.MouseEvent) => {\n    event.preventDefault();\n    setAppState(AppState.FETCHING_DATA);\n  };\n\n  if (\n    appState === AppState.PROMPT_FOR_USER_CREDS ||\n    appState === AppState.ERROR\n  ) {\n    return (\n      <div className=\"App\">\n        <h1>Habitica Tracker</h1>\n        {error && <div className=\"error\">Error: {error.message}</div>}\n        <p>\n          This tool displays a history of your Habits, Dailies and Todos in\n          Habitica.\n        </p>\n        <p>\n          Your User ID and API key can be found on the{\" \"}\n          <a\n            href=\"https://habitica.com/user/settings/api\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Settings &gt; API\n          </a>{\" \"}\n          page in Habitica.\n        </p>\n        <form className=\"user-api-form\">\n          <div className=\"label-container\">\n            <div className=\"label\">User ID</div>\n            <input\n              type=\"text\"\n              className=\"user-id\"\n              value={userId}\n              onChange={handleUserIdChange}\n            />\n          </div>\n          <div className=\"label-container\">\n            <span className=\"label\">API Key</span>\n            <input\n              type=\"password\"\n              className=\"api-key\"\n              value={userApiKey}\n              onChange={handleUserApiKeyChange}\n              minLength={36}\n            />\n          </div>\n          <div className=\"submit-wrapper\">\n            <input type=\"submit\" value=\"Fetch My Data\" onClick={handleSubmit} />\n          </div>\n        </form>\n        <h2>Note</h2>\n        <ul>\n          <li>\n            Your user ID and API key will be sent to the Habitica servers and\n            nowhere else.\n          </li>\n          <li>\n            This app does not change your Habitica account data. It only fetches\n            and displays data.\n          </li>\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <UserHistory\n        userId={userId}\n        userApiKey={userApiKey}\n        setError={setAppError}\n        setAppState={setAppState}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-wrapper\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}