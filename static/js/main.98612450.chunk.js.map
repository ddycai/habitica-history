{"version":3,"sources":["svg/difficulty-trivial.svg","TaskIcon.tsx","SummaryTableHeader.tsx","DailySummary.tsx","HabitSummary.tsx","TodoSummary.tsx","UserSummary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fillRule","d","_ref","svgRef","title","props","width","height","viewBox","ref","ForwardRef","forwardRef","TaskIcon","priority","context","useContext","AppContext","classNames","getColorClass","task","join","stars","Array","Math","ceil","fill","aria-hidden","showTaskIcons","className","VALUE_THRESHOLDS","COLOR_CLASS","value","SummaryTableHeader","role","onClick","setShowNoHistory","showNoHistory","dates","map","day","format","DailySummary","useState","data","daily","Daily","historyMap","Map","text","history","log","debug","delta","taskUpdateTime","moment","date","cronIntervals","search","unix","has","DATE_KEY_FORMAT","subtract","taskDate","set","dailyDeltas","get","filter","undefined","DailyStatus","symbol","push","HabitSummary","habit","Habit","record","JSON","stringify","scoredUp","scoredDown","dailyScores","score","HabitScore","up","down","TodoSummary","startDate","todos","todo","dateCompleted","isAfter","Todo","completionDate","React","createContext","IntervalTree","UserSummary","isLoadingUserData","setLoadingUserData","isLoadingTaskData","setLoadingTaskData","isLoadingTodoData","setLoadingTodoData","numDaysToShow","setNumDaysToShow","setShowTaskIcons","cronTimes","setCronTimes","habits","setHabits","dailys","setDailys","setTodos","userId","userApiKey","fetchWithApiKey","url","fetch","method","headers","handleApiError","res","success","Error","message","setError","useEffect","HABITICA_API_URL","then","json","result","exp","cronTime","error","type","setAppState","AppState","DATA_FETCH_SUCCESS","forEach","range","insert","numDays","appContext","_","reverse","startOf","Provider","AppControls","toggleTaskIcons","monthString","monthStart","monthEnd","month","startFormat","year","getMonthString","App","setLevel","setUserId","setUserApiKey","PROMPT_FOR_USER_CREDS","appState","ERROR","href","rel","onChange","event","minLength","preventDefault","FETCHING_DATA","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.98612450.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M10.667 10.667L16 8l-5.333-2.667L8 0 5.333 5.333 0 8l5.333 2.667L8 16z\"\n});\n\nvar SvgDifficultyTrivial = function SvgDifficultyTrivial(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgDifficultyTrivial, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/difficulty-trivial.63c79fb6.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useContext } from \"react\";\n\nimport { ReactComponent as TrivialIcon } from \"./svg/difficulty-trivial.svg\";\n\nimport \"./TaskIcon.css\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserSummary\";\n\nexport function TaskIcon(props: { task: Task }) {\n  const context = useContext(AppContext);\n  const classNames = [\n    \"task-icon-container\",\n    \"center-wrapper\",\n    getColorClass(props.task),\n  ].join(\" \");\n\n  const stars = Array(getDifficultyLevel(props.task.priority)).fill(\n    <TrivialIcon fill=\"white\" aria-hidden />\n  );\n  return context.showTaskIcons ? (\n    <div className={classNames}>{stars}</div>\n  ) : null;\n\n  /*\n  return context.showTaskIcons ? (\n    <div className={classNames}>{icon}</div>\n  ) : null;\n  */\n}\n\nfunction getDifficultyLevel(priority: number) {\n  return Math.ceil(priority / 0.5);\n}\n\nconst VALUE_THRESHOLDS = [-16, -9, -1, 1, 6, 12];\nconst COLOR_CLASS = [\"worst\", \"worse\", \"bad\", \"neutral\", \"good\", \"better\"];\n\nfunction getColorClass(task: Task): string {\n  for (let i = 0; i < VALUE_THRESHOLDS.length; i++) {\n    if (task.value < VALUE_THRESHOLDS[i]) {\n      return COLOR_CLASS[i];\n    }\n  }\n  return \"best\";\n}\n","import React, { useContext } from \"react\";\nimport { UnfoldIcon, FoldIcon } from \"@primer/octicons-react\";\n\nimport { AppContext } from \"./UserSummary\";\n\nexport default function SummaryTableHeader(props: {\n  title: string;\n  setShowNoHistory: (val: boolean) => void;\n  showNoHistory: boolean;\n}) {\n  const context = useContext(AppContext);\n  return (\n    <tr>\n      <th>\n        <div className=\"section-header\">\n          <div className=\"section-header-title\">\n            <h2>{props.title}</h2>\n            <div\n              role=\"button\"\n              className=\"show-no-history clickable\"\n              title=\"Show/Hide dailies with no data\"\n              onClick={() => props.setShowNoHistory(!props.showNoHistory)}\n            >\n              {props.showNoHistory ? (\n                <FoldIcon aria-hidden=\"true\" />\n              ) : (\n                <UnfoldIcon aria-hidden=\"true\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </th>\n      {context.dates.map((day) => (\n        <th>\n          <div className=\"date date-heading\">\n            <span>{day.format(\"ddd\")}</span>\n            <span>{day.format(\"DD\")}</span>\n          </div>\n        </th>\n      ))}\n    </tr>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport moment from \"moment\";\nimport log from \"loglevel\";\n\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserSummary\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport SummaryTableHeader from \"./SummaryTableHeader\";\n\nexport interface DailySummaryProps {\n  data: Task[];\n}\n\nexport default function DailySummary(props: DailySummaryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(false);\n\n  return (\n    <section className=\"dailys\">\n      <table>\n        <SummaryTableHeader\n          title=\"Dailies\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        {props.data.map((daily) => (\n          <Daily showNoHistory={showNoHistory} daily={daily} />\n        ))}\n      </table>\n      <div\n        className=\"link show-no-history\"\n        onClick={() => setShowNoHistory(!showNoHistory)}\n      ></div>\n    </section>\n  );\n}\n\nexport function Daily(props: { daily: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, number>();\n\n  const { text, history } = props.daily;\n\n  log.debug(text);\n  for (let i = 0; i < history.length; i++) {\n    let delta;\n    if (i === 0) {\n      delta = history[i].value;\n    } else {\n      delta = history[i].value - history[i - 1].value;\n    }\n    let taskUpdateTime = moment(history[i].date);\n    log.debug(\n      taskUpdateTime.format(\"YYYY-MM-DD HH:mm:ss\") + \": \" + history[i].value\n    );\n    // Only consider times when the task value changes (or the first value).\n    if (delta !== 0) {\n      // This task update was done via cron so the task was actually done the\n      // day before.\n      if (\n        context.cronIntervals.search(\n          taskUpdateTime.unix(),\n          taskUpdateTime.unix()\n        ).length > 0\n      ) {\n        // Daily could have been completed twice in the cron time so if this is\n        // the second time, don't subtract a day.\n        if (!historyMap.has(taskUpdateTime.format(DATE_KEY_FORMAT))) {\n          taskUpdateTime = taskUpdateTime.subtract(1, \"day\");\n        } else {\n          log.debug(\n            `Multiple daily completions on for ${text} on ${taskUpdateTime}`\n          );\n        }\n      }\n      const taskDate = taskUpdateTime.format(DATE_KEY_FORMAT);\n      historyMap.set(taskDate, delta);\n    }\n  }\n\n  const dailyDeltas = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => historyMap.get(day));\n\n  if (\n    dailyDeltas.filter((delta) => delta !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        <TaskIcon task={props.daily} />\n        <span className=\"task-name\">{text}</span>\n      </td>\n      {dailyDeltas.map((delta) => (\n        <DailyStatus delta={delta} />\n      ))}\n    </tr>\n  );\n}\n\nfunction DailyStatus(props: { delta: number | undefined }) {\n  let classNames = [\"daily-cell\"];\n  let symbol;\n  if (!props.delta || props.delta === 0) {\n    classNames.push(\"pass\");\n    symbol = \"\\xa0\";\n  } else if (props.delta > 0) {\n    classNames.push(\"success\");\n    symbol = \"✓\";\n  } else {\n    classNames.push(\"fail\");\n    symbol = \"✖\";\n  }\n  return (\n    <td className={classNames.join(\" \")}>\n      {symbol && (\n        <div className=\"center-wrapper\">\n          <span className=\"symbol\">{symbol}</span>\n        </div>\n      )}\n    </td>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport moment from \"moment\";\nimport log from \"loglevel\";\n\nimport { Task } from \"./HabiticaTypes\";\nimport { DATE_KEY_FORMAT } from \"./App\";\nimport { AppContext } from \"./UserSummary\";\nimport { TaskIcon } from \"./TaskIcon\";\nimport SummaryTableHeader from \"./SummaryTableHeader\";\n\nexport interface HabitSummaryProps {\n  data: Task[];\n}\n\nexport default function HabitSummary(props: HabitSummaryProps) {\n  const [showNoHistory, setShowNoHistory] = useState(false);\n\n  return (\n    <section className=\"habits\">\n      <table>\n        <SummaryTableHeader\n          title=\"Habits\"\n          setShowNoHistory={setShowNoHistory}\n          showNoHistory={showNoHistory}\n        />\n        {props.data.map((habit) => (\n          <Habit showNoHistory={showNoHistory} habit={habit} />\n        ))}\n      </table>\n    </section>\n  );\n}\n\nexport function Habit(props: { habit: Task; showNoHistory: boolean }) {\n  const context = useContext(AppContext);\n  const historyMap = new Map<string, [number, number]>();\n  const { text, history } = props.habit;\n\n  log.debug(text);\n  for (let record of history) {\n    let taskDate = moment(record.date).format(DATE_KEY_FORMAT);\n    log.debug(JSON.stringify(record));\n    if (record.scoredUp !== undefined && record.scoredDown !== undefined) {\n      historyMap.set(taskDate, [record.scoredUp, record.scoredDown]);\n    }\n  }\n\n  const dailyScores = context.dates\n    .map((day) => day.format(DATE_KEY_FORMAT))\n    .map((day) => historyMap.get(day));\n\n  if (\n    dailyScores.filter((score) => score !== undefined).length === 0 &&\n    !props.showNoHistory\n  ) {\n    // Don't render the component if showNoHistory is off.\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className=\"task-name-row\">\n        <TaskIcon task={props.habit} />\n        <span className=\"task-name\">{text}</span>\n      </td>\n      {dailyScores.map((score) => {\n        if (score) {\n          return <HabitScore up={score[0]} down={score[1]} />;\n        } else {\n          return <td className=\"habit-cell\">&nbsp;</td>;\n        }\n      })}\n    </tr>\n  );\n}\n\nfunction HabitScore(props: { up: number; down: number }) {\n  return (\n    <td className=\"habit-cell\">\n      <div className=\"habit-score-container\">\n        {props.up > 0 && (\n          <div className=\"success center-wrapper\">\n            <span>+{props.up}</span>\n          </div>\n        )}\n        {props.down > 0 && (\n          <div className=\"fail center-wrapper\">\n            <span>-{props.down}</span>\n          </div>\n        )}\n      </div>\n    </td>\n  );\n}\n","import React, { useContext } from \"react\";\nimport moment from \"moment\";\n\nimport \"./TodoSummary.css\";\nimport { Task } from \"./HabiticaTypes\";\nimport { AppContext } from \"./UserSummary\";\nimport { TaskIcon } from \"./TaskIcon\";\n\nconst TODO_FORMAT = \"MMM D\";\n\nexport default function TodoSummary(props: { data: Task[] }) {\n  const context = useContext(AppContext);\n  const startDate = context.dates[0];\n  const todos = props.data.filter((todo) =>\n    moment(todo!.dateCompleted).isAfter(startDate)\n  );\n\n  return (\n    <section className=\"todos\">\n      <h2>Completed Todos</h2>\n      <ul>\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nfunction Todo(props: { todo: Task }) {\n  const completionDate = moment(props.todo!.dateCompleted).format(TODO_FORMAT);\n  return (\n    <li className=\"todo-row\">\n      <TaskIcon task={props.todo} />\n      <span className=\"todo-date date\">{completionDate}</span>\n      <div className=\"todo-content\">{props.todo.text}</div>\n    </li>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport IntervalTree from \"node-interval-tree\";\nimport moment, { Moment } from \"moment\";\n\nimport { AppState } from \"./App\";\nimport { Task, History } from \"./HabiticaTypes\";\nimport DailySummary from \"./DailySummary\";\nimport HabitSummary from \"./HabitSummary\";\nimport TodoSummary from \"./TodoSummary\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nconst HABITICA_API_URL = \"https://habitica.com/api/v3\";\nconst CLIENT_API_KEY =\n  \"0d9428fd-d6fa-45f3-a4db-f130e3ef10ea-HabiticaSummaryTool\";\nconst USER_PATH = \"/user\";\nconst TASKS_PATH = \"/tasks/user\";\nconst TODOS_COMPLETED_PATH = \"/tasks/user?type=completedTodos\";\nconst DEFAULT_NUM_DAYS_TO_SHOW = 7;\n\n/**\n * Tasks completed during Cron time are tasks which were completed the previous\n * day. These are different from tasks which were completed at other times\n * which are assigned to the date on which they were completed. The Cron time\n * is used to guess at which tasks fall into each category. Because the task\n * completion time is not exactly equal to the cron time, this constant is used\n * to create a Cron time buffer to designate all tasks which were completed\n * this amount of time before the Cron time as Cron tasks.\n */\nconst CRON_BUFFER_DURATION_SECONDS = 60;\n\nexport const AppContext = React.createContext({\n  showTaskIcons: true,\n  dates: Array<Moment>(),\n  cronIntervals: new IntervalTree(),\n});\n\ninterface UserSummaryProps {\n  userId: string;\n  userApiKey: string;\n  setError: (errorMessage: Error) => void;\n  setAppState: (state: AppState) => void;\n}\n\nexport default function UserSummary(props: UserSummaryProps) {\n  // App states\n  const [isLoadingUserData, setLoadingUserData] = useState(true);\n  const [isLoadingTaskData, setLoadingTaskData] = useState(true);\n  const [isLoadingTodoData, setLoadingTodoData] = useState(true);\n\n  // User options\n  const [numDaysToShow, setNumDaysToShow] = useState<number>(\n    DEFAULT_NUM_DAYS_TO_SHOW\n  );\n  const [showTaskIcons, setShowTaskIcons] = useState<boolean>(true);\n\n  // User data\n  const [cronTimes, setCronTimes] = useState<Array<[number, number]>>([]);\n  const [habits, setHabits] = useState<Task[]>([]);\n  const [dailys, setDailys] = useState<Task[]>([]);\n  const [todos, setTodos] = useState<Task[]>([]);\n\n  const { userId, userApiKey } = props;\n  const fetchWithApiKey = (url: string) => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-user\": userId,\n        \"x-api-key\": userApiKey,\n        \"x-client\": CLIENT_API_KEY,\n      },\n    });\n  };\n\n  const handleApiError = (res: any) => {\n    if (!res.success) {\n      throw new Error(res.message);\n    }\n    return res;\n  };\n\n  const setError = props.setError;\n\n  // Fetch user data to get cron times.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + USER_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setCronTimes(\n            result.data.history.exp.map((history: History) => {\n              const cronTime = moment(history.date);\n              return [\n                cronTime.unix() - CRON_BUFFER_DURATION_SECONDS,\n                cronTime.unix() + CRON_BUFFER_DURATION_SECONDS,\n              ];\n            })\n          );\n          setLoadingUserData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch habit and daily data.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + TASKS_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setHabits(result.data.filter((task: Task) => task.type === \"habit\"));\n          setDailys(result.data.filter((task: Task) => task.type === \"daily\"));\n          setLoadingTaskData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  // Fetch completed todos.\n  useEffect(() => {\n    fetchWithApiKey(HABITICA_API_URL + TODOS_COMPLETED_PATH)\n      .then((res) => res.json())\n      .then(handleApiError)\n      .then(\n        (result) => {\n          setTodos(result.data.filter((task: Task) => task.type === \"todo\"));\n          setLoadingTodoData(false);\n        },\n        (error) => {\n          setError(error);\n        }\n      );\n  }, []); // DO NOT REMOVE the empty dependency array\n\n  if (isLoadingUserData || isLoadingTaskData || isLoadingTodoData) {\n    return (\n      <div className=\"App\">\n        <p>Loading...</p>\n      </div>\n    );\n  } else {\n    props.setAppState(AppState.DATA_FETCH_SUCCESS);\n    const cronIntervals = new IntervalTree();\n    cronTimes.forEach((range) =>\n      cronIntervals.insert(range[0], range[1], true)\n    );\n\n    const appContext = {\n      showTaskIcons: showTaskIcons,\n      dates: getDateArray(numDaysToShow),\n      cronIntervals,\n    };\n\n    return (\n      <div className=\"App\">\n        <AppContext.Provider value={appContext}>\n          <AppControls\n            numDaysToShow={numDaysToShow}\n            setNumDaysToShow={setNumDaysToShow}\n            toggleTaskIcons={() => setShowTaskIcons(!showTaskIcons)}\n          />\n          <HabitSummary data={habits} />\n          <DailySummary data={dailys} />\n          <TodoSummary data={todos} />\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n\nfunction AppControls(props: {\n  numDaysToShow: number;\n  setNumDaysToShow: (n: number) => void;\n  toggleTaskIcons: () => void;\n}) {\n  const context = useContext(AppContext);\n  const showMore = () => props.setNumDaysToShow(props.numDaysToShow + 7);\n  const showLess = () => props.setNumDaysToShow(props.numDaysToShow - 7);\n  const monthString = getMonthString(context.dates);\n\n  return (\n    <div className=\"app-controls\">\n      <div>\n        <span role=\"button\" className=\"link\" onClick={showMore}>\n          +1 week\n        </span>\n        {props.numDaysToShow > 7 ? (\n          <span>\n            <span> / </span>\n            <span role=\"button\" className=\"link\" onClick={showLess}>\n              -1 week\n            </span>\n          </span>\n        ) : null}\n      </div>\n      <div className=\"date-header\">{monthString}</div>\n      <span\n        role=\"button\"\n        className=\"link\"\n        onClick={props.toggleTaskIcons}\n        title=\"Show/Hide task icons\"\n      >\n        {context.showTaskIcons ? \"Hide\" : \"Show\"} Task Icons\n      </span>\n    </div>\n  );\n}\n\nfunction getMonthString(dates: Moment[]): string {\n  const monthStart = dates[0];\n  const monthEnd = dates[dates.length - 1];\n  if (monthStart.month() === monthEnd.month()) {\n    return monthEnd.format(\"MMMM YYYY\");\n  }\n  let startFormat = monthStart.year() === monthEnd.year() ? \"MMM\" : \"MMM YYYY\";\n  let endFormat = \"MMM YYYY\";\n  return [monthStart.format(startFormat), monthEnd.format(endFormat)].join(\"–\");\n}\n\n/** Get all the dates to show.  */\nfunction getDateArray(numDays: number): Moment[] {\n  return Array(numDays)\n    .fill(0)\n    .map((_, i) => i + 1)\n    .reverse()\n    .map((i) => moment().subtract(i, \"days\").startOf(\"day\"));\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport log from \"loglevel\";\n\nimport \"./App.css\";\nimport UserSummary from \"./UserSummary\";\n\nexport const DATE_KEY_FORMAT = \"YYYYMMDD\";\n\nexport enum AppState {\n  PROMPT_FOR_USER_CREDS,\n  FETCHING_DATA,\n  DATA_FETCH_SUCCESS,\n  ERROR,\n}\n\nfunction App() {\n  log.setLevel('debug');\n  const [userId, setUserId] = useState<string>(\"\");\n  const [userApiKey, setUserApiKey] = useState<string>(\"\");\n  const [error, setError] = useState<Error>();\n  const [appState, setAppState] = useState<AppState>(\n    AppState.PROMPT_FOR_USER_CREDS\n  );\n\n  const setAppError = (error: Error) => {\n    setError(error);\n    setAppState(AppState.ERROR);\n  };\n\n  const handleUserIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserId(event.target.value);\n  };\n\n  const handleUserApiKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserApiKey(event.target.value);\n  };\n\n  const handleSubmit = (event: React.MouseEvent) => {\n    event.preventDefault();\n    setAppState(AppState.FETCHING_DATA);\n  };\n\n  if (\n    appState === AppState.PROMPT_FOR_USER_CREDS ||\n    appState === AppState.ERROR\n  ) {\n    return (\n      <div className=\"App\">\n        <h1>Habitica Summary Tool</h1>\n        {error && <div className=\"error\">Error: {error.message}</div>}\n        <p>\n          This tool displays a weekly summary of your Habits, Dailies and\n          Todos in Habitica.\n        </p>\n        <p>\n          Your User ID and API key can be found on the{\" \"}\n          <a\n            href=\"https://habitica.com/user/settings/api\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Settings &gt; API\n          </a>{\" \"}\n          page in Habitica.\n        </p>\n        <form className=\"user-api-form\">\n          <div className=\"label-container\">\n            <div className=\"label\">User ID</div>\n            <input\n              type=\"text\"\n              className=\"user-id\"\n              value={userId}\n              onChange={handleUserIdChange}\n            />\n          </div>\n          <div className=\"label-container\">\n            <span className=\"label\">API Key</span>\n            <input\n              type=\"password\"\n              className=\"api-key\"\n              value={userApiKey}\n              onChange={handleUserApiKeyChange}\n              minLength={36}\n            />\n          </div>\n          <div className=\"submit-wrapper\">\n            <input type=\"submit\" value=\"Fetch My Data\" onClick={handleSubmit} />\n          </div>\n        </form>\n        <h2>Note</h2>\n        <ul>\n          <li>\n            Your user ID and API key will be sent to the Habitica servers and\n            nowhere else.\n          </li>\n          <li>\n            This app does not change your Habitica account data. It only fetches\n            and displays data.\n          </li>\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <UserSummary\n        userId={userId}\n        userApiKey={userApiKey}\n        setError={setAppError}\n        setAppState={setAppState}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-wrapper\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}